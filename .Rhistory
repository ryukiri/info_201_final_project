library(plotly)
# build Bar chart function
library(plotly)
library(dplyr)
# draw the bar chart with the specified grams for each ingredients for a specific Cereal
# Return the bar chart
BuildBar <- function(the.data, the.text, the.color){
# select needed information from the chart by using the input data
needed.data <- the.data %>% filter(name == the.text)
#draw the bar chart
p <- plot_ly(
needed.data,
type = 'bar',
x = needed.data[2:6]%>%colnames(),
y = ~needed.data[2:6]%>%as.numeric(),
marker = list(color = the.color))
%>%layout(barmode = 'stack', yaxis = list(title = 'grams'), xaxis = list(title = 'Ingredients'))
return(p)
}
# build Bar chart function
library(plotly)
library(dplyr)
# draw the bar chart with the specified grams for each ingredients for a specific Cereal
# Return the bar chart
BuildBar <- function(the.data, the.text, the.color){
# select needed information from the chart by using the input data
needed.data <- the.data %>% filter(name == the.text)
#draw the bar chart
p <- plot_ly(
needed.data,
type = 'bar',
x = needed.data[2:6]%>%colnames(),
y = ~needed.data[2:6]%>%as.numeric(),
marker = list(color = the.color))%>%layout(barmode = 'stack', yaxis = list(title = 'grams'), xaxis = list(title = 'Ingredients'))
return(p)
}
shiny::runApp('Documents/college/INFO201/a8-building-apps-ZKeiLin')
runApp('Documents/college/INFO201/a8-building-apps-ZKeiLin')
Merge.feature.year <- function(the.features, feature){
the.year<- as.numeric(gsub("[^0-9]", "", the.features))
#deparse(substitute(the.features)), perl=TRUE))
the <- get(paste0('features.', the.year))
name <- toString(the.year)
the.x = get(the.features)$X
year = data.frame(get(the.features)[[feature]], X = the.x)
colnames(year)[1] <- toString(the.year)
return(year)
}
ab <- lapply(names(all), Create, 'danceability')%>%Reduce(function(...) merge(..., by='X', all=T), ab)
Merge.feature.year <- function(the.features, feature){
the.year<- as.numeric(gsub("[^0-9]", "", the.features))
#deparse(substitute(the.features)), perl=TRUE))
the <- get(paste0('features.', the.year))
name <- toString(the.year)
the.x = get(the.features)$X
year = data.frame(get(the.features)[[feature]], X = the.x)
colnames(year)[1] <- toString(the.year)
return(year)
}
all <- list(
'features.2008' = features.2008,
'features.2009' =features.2009,
'features.2010' =features.2010,
'features.2011' =features.2011,
'features.2012' =features.2012
)
#
#
and putting them into respective data frames
features.2016 <- read.csv("features/features.2016.csv")
features.2015 <- read.csv("features/features.2015.csv")
features.2014 <- read.csv("features/features.2014.csv")
features.2013 <- read.csv("features/features.2013.csv")
features.2012 <- read.csv("features/features.2012.csv")
features.2011 <- read.csv("features/features.2011.csv")
features.2010 <- read.csv("features/features.2010.csv")
features.2009 <- read.csv("features/features.2009.csv")
features.2008 <- read.csv("features/features.2008.csv")
library(devtools)
library(Rspotify)
library(dplyr)
library(knitr)
shinyServer(function(input, output) {
## Authorizes Spotify API with keys
keys <- spotifyOAuth("Info 201","ae706b417cc645f78c559186204dadd4","5f5769652ae24ceca43e05074b8b84eb")
source("functions/GetSongData.R")
source("functions/combine.features.by.year.R")
output$rolePlot <- renderPlot({
## Read in songs for each year
songs.2016 <- read.csv("Songs/Songs - 2016.csv")
songs.2015 <- read.csv("Songs/Songs - 2015.csv")
songs.2014 <- read.csv("Songs/Songs - 2014.csv")
songs.2013 <- read.csv("Songs/Songs - 2013.csv")
songs.2012 <- read.csv("Songs/Songs - 2012.csv")
songs.2011 <- read.csv("Songs/Songs - 2011.csv")
songs.2010 <- read.csv("Songs/Songs - 2010.csv")
songs.2009 <- read.csv("Songs/Songs - 2009.csv")
songs.2008 <- read.csv("Songs/Songs - 2008.csv")
## Grabbing audio features for the years and putting them into respective data frames
features.2016 <- read.csv("features/features.2016.csv")
features.2015 <- read.csv("features/features.2015.csv")
features.2014 <- read.csv("features/features.2014.csv")
features.2013 <- read.csv("features/features.2013.csv")
features.2012 <- read.csv("features/features.2012.csv")
features.2011 <- read.csv("features/features.2011.csv")
features.2010 <- read.csv("features/features.2010.csv")
features.2009 <- read.csv("features/features.2009.csv")
features.2008 <- read.csv("features/features.2008.csv")
features.2016 <- read.csv("features/features.2016.csv")
shiny::runApp('Documents/college/INFO201/info_201_final_project')
getwd()
setwd('~/Documents/college/INFO201/info_201_final_project')
runApp()
keys <- spotifyOAuth("Info 201","ae706b417cc645f78c559186204dadd4","5f5769652ae24ceca43e05074b8b84eb")
source("functions/GetSongData.R")
source("functions/Combine.features.by.year.R")
source("functions/GetRecommendations.R")
output$rolePlot <- renderPlot({
## Read in songs for each year
songs.2015 <- read.csv("Songs/Songs - 2015.csv")
songs.2014 <- read.csv("Songs/Songs - 2014.csv")
songs.2013 <- read.csv("Songs/Songs - 2013.csv")
songs.2012 <- read.csv("Songs/Songs - 2012.csv")
songs.2011 <- read.csv("Songs/Songs - 2011.csv")
songs.2010 <- read.csv("Songs/Songs - 2010.csv")
songs.2009 <- read.csv("Songs/Songs - 2009.csv")
songs.2008 <- read.csv("Songs/Songs - 2008.csv")
## Grabbing audio features for the years and putting them into respective data frames
features.2016 <- read.csv("features/features.2016.csv")
features.2015 <- read.csv("features/features.2015.csv")
features.2014 <- read.csv("features/features.2014.csv")
features.2013 <- read.csv("features/features.2013.csv")
features.2012 <- read.csv("features/features.2012.csv")
features.2011 <- read.csv("features/features.2011.csv")
features.2010 <- read.csv("features/features.2010.csv")
features.2009 <- read.csv("features/features.2009.csv")
features.2008 <- read.csv("features/features.2008.csv")
runApp()
runApp()
runApp()
shiny::runApp('~/Documents/college/INFO201/a8-building-apps-ZKeiLin')
shiny::runApp()
