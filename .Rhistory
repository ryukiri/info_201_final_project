locate.my.legst <- com.body %>% filter(legislator.bioguide_id == select.com$bioguide_id) #find my representative
stand.my.legst <- locate.my.legst$side
count.female <- com.body %>% filter(legislator.gender == 'F') %>% summarise(count = n())
percent.female <- count.female$count / count.ppl$count
filt.com <- sing.dataframe %>% filter(subcommittee == FALSE)
select.com <- filt.com %>% filter(name == 'House Committee on Ways and Means')
com.url <- paste0(base, '/committees') ##the base resource & uri
com.query.params <- list(committee_id = select.com[1, 2], fields = 'members', per_page = 'all')
com.response <- GET(com.url, query = com.query.params)
com.body <- fromJSON(content(com.response,'text'))$results$members[[1]] %>% flatten()
chair.name <- com.body %>% filter(title == 'Chairman')
count.ppl <- com.body %>% summarise(count = n()) #number of people
locate.my.legst <- com.body %>% filter(legislator.bioguide_id == select.com$bioguide_id) #find my representative
stand.my.legst <- locate.my.legst$side
count.female <- com.body %>% filter(legislator.gender == 'F') %>% summarise(count = n())
distr.female <- 100 * round(count.female$count / count.ppl$count, digits = 4)
distr.male <- 100 - percent.female
distr.male <- 100 - distr.female
View(count.female)
View(count.ppl)
View(com.body)
# install.packages('jsonlite')
# install.packages('httr')
# install.packages('dplyr')
# install.packages('knitr')
# install.packages('Hmisc')
library(jsonlite)
library(dplyr)
library(httr)
library(knitr)
library(Hmisc)
base <- 'https://congress.api.sunlightfoundation.com'
my.zipcode <- '98028'
cite.source <- [source](https://en.wikipedia.org/wiki/United_States_House_Committee_on_Ways_and_Means)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
ggplot(data = diamonds.sample)
# Exercise 1: ggplot2 basics
# Install and load `ggplot2`
# You will also want to load `dplyr`
library("ddplot2")
library("dplyr")
# For this exercise you'll be working with the `diamonds` data set included in the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the column descriptions
# Also check the _column names_ and the _number of rows_ in the data set
?diamonds
colnames(diamonds)
nrow(diamonds)
# This data set has a lot of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds.sample`
diamonds.sample <- sample_n(diamonds, 1000)
# Start by making a new `ggplot` with the `diamonds.sample` as the data (no geometry yet)
# What do you see?
ggplot(data = diamonds.sample)
# Exercise 1: ggplot2 basics
# Install and load `ggplot2`
# You will also want to load `dplyr`
library("ggplot2")
library("dplyr")
# For this exercise you'll be working with the `diamonds` data set included in the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the column descriptions
# Also check the _column names_ and the _number of rows_ in the data set
?diamonds
colnames(diamonds)
nrow(diamonds)
# This data set has a lot of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds.sample`
diamonds.sample <- sample_n(diamonds, 1000)
# Start by making a new `ggplot` with the `diamonds.sample` as the data (no geometry yet)
# What do you see?
ggplot(data = diamonds.sample)
View(diamonds)
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = cut, size=price, color=price))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price, color=carat))
ggplot(data = diamonds.sample) +
geom_smooth(mapping = aes(x = carat, y = price, color=cut))
ggplot(data = diamonds) +  # full data set example
geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds.sample) +
geom_bar(mapping = aes(x = cut, fill=clarity))
ggplot(data = diamonds.sample) +
geom_histogram(aes(x=price, fill=clarity))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price, color=cut), alpha=0.1) +
geom_smooth(mapping = aes(x = carat, y = price, color=cut), se=FALSE)
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price, color=cut), alpha=1) +
geom_smooth(mapping = aes(x = carat, y = price, color=cut), se=FALSE)
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price, color=cut), alpha=0.2) +
geom_smooth(mapping = aes(x = carat, y = price, color=cut), se=FALSE)
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price, color=cut), alpha=0.2) +
geom_smooth(mapping = aes(x = carat, y = price, color=cut), se=TRUE)
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price, color=cut), alpha=0.2) +
geom_smooth(mapping = aes(x = carat, y = price, color=cut), se=TRUE)
library(dyplr)
library(dplyr)
read.csv("shootings-2016.csv")
View("shootings-2016.csv")
download.packages(shiny)
download.packages(shinny)
qnorm(0.9)
qnorm(0.01)
qnorm(0.995)
qnorm(0.005)
pnorm(-2.834)
survey.report <- read.csv("/Users/QLUO/Desktop/a7-collaboration-inflatablepizza/data/intro-survey.csv")
View(survey.report)
View(sum.data)
sum.data <- survey.report %>% group_by(What.is.your.current.class.standing.) %>% summarise(count = n())
View(sum.data)
survey.report <- read.csv("/Users/QLUO/Desktop/a7-collaboration-inflatablepizza/data/intro-survey.csv")
View(survey.report)
sum.data <- survey.report %>% group_by(What.is.your.current.class.standing.) %>% summarise(count = n())
View(sum.data)
sum.data <- survey.report %<% group_by(What.is.your.current.class.standing.) %>% summarise(count = n())
View(sum.data)
survey.report <- read.csv("/Users/QLUO/Desktop/a7-collaboration-inflatablepizza/data/intro-survey.csv")
View(survey.report)
sum.data <- survey.report %<% group_by(What.is.your.current.class.standing.) %<% summarise(count = n())
View(sum.data)
library(dplyr)
library(ggplot2)
# Create a pie chart about the question "Do you consider
# yourself as a dog person or a cat person :)
survey.report <- read.csv("/Users/QLUO/Desktop/a7-collaboration-inflatablepizza/data/intro-survey.csv")
View(survey.report)
sum.data <- survey.report %<% group_by(What.is.your.current.class.standing.) %<% summarise(count = n())
View(sum.data)
sum.data <- survey.report %>% group_by(What.is.your.current.class.standing.) %>% summarise(count = n())
View(sum.data)
sum.data <- survey.report %>% group_by(What.is.your.current.class.standing.) %>% summarise(count = n())
sum.data <- sum.data[c('Freshman', 'Sophomore', 'Junior', 'Senior'),]
View(sum.data)
sum.data <- survey.report %>% group_by(What.is.your.current.class.standing.) %>% summarise(count = n())
View(sum.data)
sum.data <- survey.report %>% group_by(What.is.your.current.class.standing.) %>% summarise(count = n())
View(sum.data)
sum.data <- sum.data[c(1, 4, 2, 3),]
View(sum.data)
pie.three <- ggplot(aes(x='factor(cyl)', fill='factor(vs)'), data=sum.data) + \
geom_bar() +
ggtitle("Do you consider yourself as a dog person or a cat person?")
pie.three <- ggplot(aes(x='factor(cyl)', fill='factor(vs)'), data=sum.data) + \
geom_bar() + \
ggtitle('Do you consider yourself as a dog person or a cat person?')
View(pie.three)
pie.three <- ggplot(aes(x='factor(cyl)', fill='factor(vs)'), data=sum.data) + \
geom_bar() + \
ggtitle('Do you consider yourself as a dog person or a cat person?')
Chart3 <- function(dataset){
#Organize information
sum.data <- dataset %<% group_by(What.is.your.current.class.standing.) %>% summarise(count = n()) %>% arrange()
#Draw the bar chart
pie.three <- ggplot(sum.data, aes(reorder(What.is.your.current.class.standing., -count), count))  + geom_col()
+ ggtitle("Descending Distribution of Class Standing") +
labs(x = "Class Standing", y = "Counts")
return (pie.three)
}
Chart3(survey.report)
Chart3 <- function(dataset){
#Organize information
sum.data <- dataset %>% group_by(What.is.your.current.class.standing.) %>% summarise(count = n()) %>% arrange()
#Draw the bar chart
pie.three <- ggplot(sum.data, aes(reorder(What.is.your.current.class.standing., -count), count))  + geom_col()
+ ggtitle("Descending Distribution of Class Standing") +
labs(x = "Class Standing", y = "Counts")
return (pie.three)
}
Chart3(survey.report)
Chart3 <- function(dataset){
#Organize information
sum.data <- dataset %>% group_by(What.is.your.current.class.standing.) %>% summarise(count = n()) %>% arrange()
#Draw the bar chart
pie.three <- ggplot(sum.data, aes(reorder(What.is.your.current.class.standing., -count), count))  + geom_col() + ggtitle("Descending Distribution of Class Standing") +
labs(x = "Class Standing", y = "Counts")
return (pie.three)
}
Chart3(survey.report)
qnorm(0.65)
qnorm(1.96)
pnorm(1.96)
qnorm(0.65)
pnorm(0.65)
qnorm(1.65)
shiny::runApp('Desktop/m18-shiny/exercise-4')
df <- read.csv('~/Desktop/info-201/m14-shiny/exercise-4/./data/electoral_college.csv', stringsAsFactors = FALSE)
# server.R
library(dplyr)
# Read in data
#setwd('~/Desktop/info-201/m14-shiny/exercise-4/')
source('./scripts/buildMap.R')
source('./scripts/buildScatter.R')
df <- read.csv('~/Desktop/info-201/m14-shiny/exercise-4/./data/electoral_college.csv', stringsAsFactors = FALSE)
state.codes <- read.csv('./data/state_codes.csv', stringsAsFactors = FALSE)
# Join together state.codes and df
joined.data <- left_join(df, state.codes, by="state")
# Compute the electoral votes per 100K people in each state
joined.data <- joined.data %>% mutate(ratio = votes/population * 100000)
View(joined.data)
cereal.data <- read.csv('Desktop/a8-building-apps-luoq4/data/cereal.tsv', stringsAsFactors = FALSE)
View(cereal.data)
cereal.data <- read.tsv('Desktop/a8-building-apps-luoq4/data/cereal.tsv', stringsAsFactors = FALSE)
View(cereal.data)
cereal.data <- read.table(file='Desktop/a8-building-apps-luoq4/data/cereal.tsv')
View(cereal.data)
runApp('Desktop/a8-building-apps-luoq4')
library(dplyr)
library(plotly)
cereal.data <- read.table(file='Desktop/a8-building-apps-luoq4/data/cereal.tsv', skip=1)
View(cereal.data)
library(dplyr)
library(plotly)
cereal.data <- read.table(file='Desktop/a8-building-apps-luoq4/data/cereal.tsv', skip=1)
View(cereal.data)
x <- cereal.data$V1
y <- cereal.data$V16
data <- data.frame(x, y)
library(dplyr)
library(plotly)
cereal.data <- read.table(file='Desktop/a8-building-apps-luoq4/data/cereal.tsv', skip=1)
View(cereal.data)
rating.x <- cereal.data$V1
rating.y <- cereal.data$V16
rating.data <- data.frame(rating.x, rating.y)
p <- plot_ly(data, x = ~rating.x, y = ~rating.y, type = 'bar', color = I("rgba(222,45,38,0.8)")) %>%
layout(title = "Least Used Features",
xaxis = list(title = ""),
yaxis = list(title = ""))
library(dplyr)
library(plotly)
cereal.data <- read.table(file='Desktop/a8-building-apps-luoq4/data/cereal.tsv', skip=1)
View(cereal.data)
rating.x <- cereal.data$V1
rating.y <- cereal.data$V16
rating.data <- data.frame(rating.x, rating.y)
p <- plot_ly(data, x = ~rating.x, y = ~rating.y, type = 'bar', color = I("rgba(222,45,38,0.8)")) %>%
layout(title = "Least Used Features",
xaxis = list(title = ""),
yaxis = list(title = ""))
p
runApp('Desktop/m18-shiny/exercise-4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
library(dplyr)
library(plotly)
cereal.data <- read.table(file='Desktop/a8-building-apps-luoq4/data/cereal.tsv')
scatter.x <- cereal.data$V4
scatter.y <- cereal.data$V16
scatter.data <- data.frame(scatter.x, scatter.y)
p <- plot_ly(data = scatter.data, x = ~scatter.x, y = ~scatter.y,
marker = list(size = 10,
color = 'rgba(255, 182, 193, .9)',
line = list(color = 'rgba(152, 0, 0, .8)',
width = 1))) %>%
layout(title = 'Calories v.s Rating Scatter',
yaxis = list(zeroline = FALSE),
xaxis = list(zeroline = FALSE))
p
p <- plot_ly(data = cereal.data, x = ~V4, y = ~V16,
marker = list(size = 10,
color = 'rgba(255, 182, 193, .9)',
line = list(color = 'rgba(152, 0, 0, .8)',
width = 1))) %>%
layout(title = 'Calories v.s Rating Scatter',
yaxis = list(zeroline = FALSE),
xaxis = list(zeroline = FALSE))
p <- plot_ly(data = cereal.data, x = ~V4, y = ~V16,
marker = list(size = 10,
color = 'rgba(255, 182, 193, .9)',
line = list(color = 'rgba(152, 0, 0, .8)',
width = 1))) %>%
layout(title = 'Calories v.s Rating Scatter',
yaxis = list(zeroline = FALSE),
xaxis = list(zeroline = FALSE))
cereal.data <- read.table(file='Desktop/a8-building-apps-luoq4/data/cereal.tsv')
p <- plot_ly(data = cereal.data, x = ~V4, y = ~V16,
marker = list(size = 10,
color = 'rgba(255, 182, 193, .9)',
line = list(color = 'rgba(152, 0, 0, .8)',
width = 1))) %>%
layout(title = 'Calories v.s Rating Scatter',
yaxis = list(zeroline = FALSE),
xaxis = list(zeroline = FALSE))
p
cereal.data <- read.table(file='Desktop/a8-building-apps-luoq4/data/cereal.tsv',skip=1)
p <- plot_ly(data = cereal.data, x = ~V4, y = ~V16,
marker = list(size = 10,
color = 'rgba(255, 182, 193, .9)',
line = list(color = 'rgba(152, 0, 0, .8)',
width = 1))) %>%
layout(title = 'Calories v.s Rating Scatter',
yaxis = list(zeroline = FALSE),
xaxis = list(zeroline = FALSE))
p
cereal.data <- read.table(file='Desktop/a8-building-apps-luoq4/data/cereal.tsv',skip=1)
p <- plot_ly(data = cereal.data, 'Calories' = ~V4, 'Ratings' = ~V16,
marker = list(size = 10,
color = 'rgba(255, 182, 193, .9)',
line = list(color = 'rgba(152, 0, 0, .8)',
width = 1))) %>%
layout(title = 'Calories v.s Rating Scatter Plot',
yaxis = list(zeroline = FALSE),
xaxis = list(zeroline = FALSE))
p
cereal.data <- read.table(file='Desktop/a8-building-apps-luoq4/data/cereal.tsv',skip=1)
calories <- cereal.data$V4
ratings <- cereal.data$V16
scatter.data <- data.frame(calories, ratings)
p <- plot_ly(data = scatter.data, x = ~calories, y = ~ratings,
marker = list(size = 10,
color = 'rgba(255, 182, 193, .9)',
line = list(color = 'rgba(152, 0, 0, .8)',
width = 1))) %>%
layout(title = 'Calories v.s Rating Scatter Plot',
yaxis = list(zeroline = FALSE),
xaxis = list(zeroline = FALSE))
p
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
sa
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
install.packages('rsconnect')
install.packages("rsconnect")
shiny::runApp('Desktop/a8-building-apps-luoq4')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
rsconnect::setAccountInfo(name='vanessaluo',
token='E8A53FAAFE9C23BD3CFB5A0D204D525E',
secret='+QprWznQr9PZpSSC6iGhypcM2rhQHfFeMAEfvODf')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
runApp('Desktop/a8-building-apps-luoq4')
source('~/.active-rstudio-document', echo=TRUE)
download.packages('tidytext')
library(tidytext)
library(tidytext)
library(dplyr)
library(stringr)
library(ggplot2)
library(rvest)
setwd('~/Documents/info201-s17/m20-text/exercise-2/')
# Read in web page
page <- read_html('https://www.washington.edu/students/crscat/info.html')
# Extract descriptions of each course into a dataframe (may take multiple steps)
course.titles <- page %>% html_nodes('p b') %>% html_text()
descriptions <- page %>% html_nodes('p') %>% html_text()
classes <- data.frame(title = course.titles, description = descriptions[2:length(descriptions)], stringsAsFactors = FALSE)
# How many courses are in the catalogue?
num.courses <- nrow(classes) # 46
# Create a tidytext sturcture of all words
all.words <- classes %>% unnest_tokens(word, description)
# Which words do we use to describe our courses?
word.count <- all.words %>%
group_by(word) %>%
summarize(count = n()) %>%
arrange(-count)
# Create a set of stop words by adding (more) irrelevant words to the stop_words dataframe
more.stop.words <- data.frame(
word = c("course", "info", "information"),
lexicon = "custom"
)
all.stop.words <- cbind(stop_words, more.stop.words)
# Remove stop words by performing an anti_join with the stop_words dataframe
no.stop.words <- all.words %>%
anti_join(all.stop.words, by="word")
# Which non stop-words are most common?
non.stop.count <- no.stop.words %>%
group_by(word) %>%
summarize(count = n()) %>%
arrange(-count)
# Use ggplot to make a horizontal bar chart of the word frequencies of non-stop words
no.stop.words %>%
count(word, sort = TRUE) %>%
filter(n > 10) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
rec.params <- list(seed_tracks = track.id, limit = 10)
track.params <- list(q = my.song, type = "track", limit = 1)
track.response <- GET("https://api.spotify.com/v1/search", query = track.params)
track.body <- content(track.response, "text")
track.data <- fromJSON(track.body)
track.df <- as.data.frame(track.data$tracks[2])
track.id <- track.df$items.id
keys <- spotifyOAuth("Info 201","ae706b417cc645f78c559186204dadd4","5f5769652ae24ceca43e05074b8b84eb")
rec.params <- list(seed_tracks = track.id, limit = 10)
rec.response <- httr::GET("https://api.spotify.com/v1/recommendations", query = rec.params, httr::config(token = keys))
rec.body <- content(rec.response, "text")
rec.data <- fromJSON(rec.body)
rec.df <- as.data.frame(rec.data) %>% select(tracks.name, tracks.id)
library(httr)
library(jsonlite)
library(Rspotify)
library(dplyr)
track.params <- list(q = my.song, type = "track", limit = 1)
track.response <- GET("https://api.spotify.com/v1/search", query = track.params)
track.body <- content(track.response, "text")
track.data <- fromJSON(track.body)
track.df <- as.data.frame(track.data$tracks[2])
track.id <- track.df$items.id
keys <- spotifyOAuth("Info 201","ae706b417cc645f78c559186204dadd4","5f5769652ae24ceca43e05074b8b84eb")
rec.params <- list(seed_tracks = track.id, limit = 10)
rec.response <- httr::GET("https://api.spotify.com/v1/recommendations", query = rec.params, httr::config(token = keys))
rec.body <- content(rec.response, "text")
rec.data <- fromJSON(rec.body)
rec.df <- as.data.frame(rec.data) %>% select(tracks.name, tracks.id)
library(httr)
library(jsonlite)
library(Rspotify)
library(dplyr)
track.params <- list(q = my.song, type = "track", limit = 1)
track.response <- GET("https://api.spotify.com/v1/search", query = track.params)
track.body <- content(track.response, "text")
track.data <- fromJSON(track.body)
track.df <- as.data.frame(track.data$tracks[2])
track.id <- track.df$items.id
keys <- spotifyOAuth("Info 201","ae706b417cc645f78c559186204dadd4","5f5769652ae24ceca43e05074b8b84eb")
rec.params <- list(seed_tracks = track.id, limit = 10)
rec.response <- httr::GET("https://api.spotify.com/v1/recommendations", query = rec.params, httr::config(token = keys))
rec.body <- content(rec.response, "text")
rec.data <- fromJSON(rec.body)
rec.df <- as.data.frame(rec.data) %>% select(tracks.name, tracks.id)
colnames(rec.df) <- c("Song", "Spotify ID")
download.packages(Rspotify)
download.packages("Rspotify")
download.packages('Rspotify')
library(devtools)
install_github("tiagomendesdantas/Rspotify")
View(rec.df)
library(httr)
library(jsonlite)
library(Rspotify)
library(dplyr)
track.params <- list(q = my.song, type = "track", limit = 1)
track.response <- GET("https://api.spotify.com/v1/search", query = track.params)
track.body <- content(track.response, "text")
track.data <- fromJSON(track.body)
track.df <- as.data.frame(track.data$tracks[2])
track.id <- track.df$items.id
keys <- spotifyOAuth("Info 201","ae706b417cc645f78c559186204dadd4","5f5769652ae24ceca43e05074b8b84eb")
value1 <- pchisq(4.909, df=4)
value1 <- pchisq(15, df=1)
value1 <- pchisq(9.48773, df=4)
value1 <- pchisq(9.48773, df=4)
value1 <- pchisq(5.385 , df=4)
value1 <- pchisq(14.343, df=4)
value1 <- pchisq(4.993, df=3)
value1 <- pchisq(3.3059, df=2)
value1 <- pchisq(8.68, df=2)
shiny::runApp('Desktop/info_201_final_project')
shiny::runApp()
