```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Get legislators for zip code
api.method <- "/legislators/locate?"
response <- GET(paste(base.url, api.method, sep=""), query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
flattened <- flatten(results$results)
# Add markdown friendly links to twitter and their website
legislators <- flattened %>%
mutate(website=paste("[link](", website,")", sep="")) %>%
mutate(twitter=paste("[link](https://twitter.com/", twitter_id,")", sep=""))
# Get the required information and create a markdown table
legislators %>%
select(first_name,last_name,title,party,chamber,phone,website,twitter) %>%
kable(format="markdown" )
# Function to get all the Committees served by a legislator
committeesServed <- function(id){
api.method <- "/committees?"
query.params <- list(member_ids=id)
response <- GET(paste(base.url, api.method, sep=""), query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
flattened <- flatten(results$results) %>%
mutate(bioguide_id = id)
}
# Create a list of legislators, run it through the committeesServed function
# and then join them together
list.of.id <- legislators %>%
select(bioguide_id)
list.of.committees <- lapply(list.of.id$bioguide_id, committeesServed) %>%
bind_rows()
legislators.and.committees <- inner_join(list.of.committees, legislators, by="bioguide_id")
legislators.and.committees <- legislators.and.committees %>%
mutate(fullname = paste(first_name, last_name, sep=" "))
# Create a bar plot with committee info
par(las=2)
par(mar=c(5,8,4,2))
counts <- table(legislators.and.committees$fullname)
barplot(rev(counts),main="Committees Served on by Each Rep.", horiz=TRUE,
names.arg=c("Pramila Jayapal", "Patty Murray", "Maria Cantwell"))
```
chosen.committee <- legislators.and.committees[1]
View(chosen.committee)
chosen.committee <- legislators.and.committees[,1]
chosen.committee <- data.frame(legislators.and.committees[,1])
View(chosen.committee)
chosen.committee <- data.frame(legislators.and.committees[,1])
chosen.committee <- legislators.and.committees[,1]
chosen.committee <- data.frame(legislators.and.committees[1,3])
View(chosen.committee)
chosen.committee <- data.frame(legislators.and.committees[1,])
View(chosen.committee)
query.params <- list(committee_ids=chosen.committee$committee_id)
response <- GET(paste(base.url, api.method, sep=""), query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
flattened <- flatten(results$results)
query.params <- list(committee_id=chosen.committee$committee_id)
response <- GET(paste(base.url, api.method, sep=""), query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
flattened <- flatten(results$results)
api.method <- "/legislators/locate?"
response <- GET(paste(base.url, api.method, sep=""), query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
flattened <- flatten(results$results)
legislators <- flattened %>%
mutate(website=paste("[link](", website,")", sep="")) %>%
mutate(twitter=paste("[link](https://twitter.com/", twitter_id,")", sep=""))
legislators %>%
select(first_name,last_name,title,party,chamber,phone,website,twitter) %>%
kable(format="markdown" )
legislators %>%
select(first_name,last_name,title,party,chamber,phone,website,twitter) %>%
kable(format="markdown" )
committeesServed <- function(id){
api.method <- "/committees?"
query.params <- list(member_ids=id)
response <- GET(paste(base.url, api.method, sep=""), query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
flattened <- flatten(results$results) %>%
mutate(bioguide_id = id)
}
list.of.id <- legislators %>%
select(bioguide_id)
list.of.committees <- lapply(list.of.id$bioguide_id, committeesServed) %>%
bind_rows()
committeesServed <- function(id){
api.method <- "/committees?"
query.params <- list(member_ids=id)
response <- GET(paste(base.url, api.method, sep=""), query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
flattened <- flatten(results$results) %>%
mutate(bioguide_id = id)
}
list.of.id <- legislators %>%
select(bioguide_id)
list.of.committees <- lapply(list.of.id$bioguide_id, committeesServed) %>%
bind_rows()
legislators.and.committees <- inner_join(list.of.committees, legislators, by="bioguide_id")
par(mar=c(5,8,4,2))
counts <- table(legislators.and.committees$fullname)
barplot(rev(counts),main="Committees Served on by Each Rep.", horiz=TRUE,
names.arg=c("Pramila Jayapal", "Patty Murray", "Maria Cantwell"))
chosen.committee <- data.frame(legislators.and.committees[1,])
query.params <- list(committee_id=chosen.committee$committee_id)
response <- GET(paste(base.url, api.method, sep=""), query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
flattened <- flatten(results$results)
---
output: html_document
---
```{r, echo=FALSE, message=FALSE, warning=FALSE}
library(jsonlite)
library(dplyr)
library(httr)
library(knitr)
base.url <- 'https://congress.api.sunlightfoundation.com'
# Block of code to get district number for my zipcode
zip.code <- "98195"
api.method <- "/districts/locate?"
query.params <- list(zip=zip.code)
response <- GET(paste(base.url, api.method, sep=""), query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
flattened <- flatten(results$results)
my.district <- flattened$district
```
My congressional district is district `r my.district` and my zipcode is `r zip.code`
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Get legislators for zip code
api.method <- "/legislators/locate?"
response <- GET(paste(base.url, api.method, sep=""), query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
flattened <- flatten(results$results)
# Add markdown friendly links to twitter and their website
legislators <- flattened %>%
mutate(website=paste("[link](", website,")", sep="")) %>%
mutate(twitter=paste("[link](https://twitter.com/", twitter_id,")", sep=""))
# Get the required information and create a markdown table
legislators %>%
select(first_name,last_name,title,party,chamber,phone,website,twitter) %>%
kable(format="markdown" )
# Function to get all the Committees served by a legislator
committeesServed <- function(id){
api.method <- "/committees?"
query.params <- list(member_ids=id)
response <- GET(paste(base.url, api.method, sep=""), query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
flattened <- flatten(results$results) %>%
mutate(bioguide_id = id)
}
# Create a list of legislators, run it through the committeesServed function
# and then join them together
list.of.id <- legislators %>%
select(bioguide_id)
list.of.committees <- lapply(list.of.id$bioguide_id, committeesServed) %>%
bind_rows()
legislators.and.committees <- inner_join(list.of.committees, legislators, by="bioguide_id")
legislators.and.committees <- legislators.and.committees %>%
mutate(fullname = paste(first_name, last_name, sep=" "))
# Create a bar plot with committee info
par(las=2)
par(mar=c(5,8,4,2))
counts <- table(legislators.and.committees$fullname)
barplot(rev(counts),main="Committees Served on by Each Rep.", horiz=TRUE,
names.arg=c("Pramila Jayapal", "Patty Murray", "Maria Cantwell"))
chosen.committee <- data.frame(legislators.and.committees[1,])
query.params <- list(committee_id=chosen.committee$committee_id)
response <- GET(paste(base.url, api.method, sep=""), query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
flattened <- flatten(results$results)
```
api.method <- "/committees?"
query.params <- list(committee_id=chosen.committee$committee_id)
response <- GET(paste(base.url, api.method, sep=""), query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
flattened <- flatten(results$results)
View(flattened)
query.params <- list(committee_id=chosen.committee$committee_id,fields="members")
response <- GET(paste(base.url, api.method, sep=""), query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
flattened <- flatten(results$results)
View(flattened)
query.params <- list(committee_id=chosen.committee$committee_id,fields="members")
response <- GET(paste(base.url, api.method, sep=""), query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
flattened <- flatten(results$results)
View(results)
View(flattened)
flattened[1]
view(flattened[1])
View(flattened[1])
View(flattened[1,1])
flattened <- flatten(results$results)[1,1]
flattened <- flattened[1,1]
flattened <- flatten(results$results)
flattened <- flattened[1,1]
flattened <- data.frame(flattened[1,1])
flattened <- flatten(results$results)
flattened <- data.frame(flattened[1,1])
View(flattened)
results <- fromJSON(content(res,"text"))$results$members[[1]] %>% flatten()
body <- content(response, "text")
results <- fromJSON(content(response,"text"))$results$members[[1]] %>% flatten()
View(results)
query.params <- list(committee_id=chosen.committee$committee_id,fields="members")
response <- GET(paste(base.url, api.method, sep=""), query = query.params)
body <- content(response, "text")
results <- fromJSON(content(response,"text"))$results$members[[1]] %>% flatten()
committee.chair <- paste(results$legislator.first_name, results$legislator.last_name,sep=" ")
committee.chair <- paste(results$legislator.first_name, results$legislator.last_name,sep=" ")[1]
people.on.committee <- nrow(results)
my.rep.maj.min <- results %>%
filter(legislator.first_name == "Pramila")
View(my.rep.maj.min)
select(side)
my.rep.maj.min <- results %>%
filter(legislator.first_name == "Pramila") %>%
select(side)
View(my.rep.maj.min)
my.rep.maj.min <- results %>%
filter(legislator.first_name == "Pramila") %>%
select(side)[1]
committee.chair <- paste(results$legislator.first_name, results$legislator.last_name,sep=" ")[1]
people.on.committee <- nrow(results)
my.rep.maj.min <- results %>%
filter(legislator.first_name == "Pramila") %>%
select(side)[1]
my.rep.maj.min <- results %>%
filter(legislator.first_name == "Pramila") %>%
select(side)
my.rep.maj.min <- results %>%
filter(legislator.first_name == "Pramila") %>%
as.character(select(side))
my.rep.maj.min <- results %>%
filter(legislator.first_name == "Pramila") %>%
select(side) %>%
as.character()
gender.percent.male <- results %>%
filter(legislator.gender == "M")
View(gender.percent.male)
gender.percent.male <- results %>%
filter(legislator.gender == "M") %>%
nrow()
gender.percent.male <- results %>%
filter(legislator.gender == "M") %>%
nrow() / 36
gender.percent.male <- results %>%
filter(legislator.gender == "M") %>%
nrow() / 36 * 100
gender.percent.male <- results %>%
filter(legislator.gender == "M") %>%
nrow() / 36 * 100 %>%
round()
gender.percent.male <- results %>%
filter(legislator.gender == "M") %>%
nrow() / 36 * 100 %>%
round()
gender.percent.male <- results %>%
filter(legislator.gender == "M") %>%
nrow() / 36 * 100 %>%
round(digits = 2)
gender.percent.female <- results %>%
filter(legislator.gender == "F") %>%
nrow() / 36 * 100 %>%
round(digits = 2)
gender.percent.female <- results %>%
filter(legislator.gender == "F") %>%
nrow() / 36 * 100 %>%
round(.,digits = 2)
gender.percent.female <- results %>%
filter(legislator.gender == "F") %>%
round(nrow() / 36 * 100) %>%
round(digits = 2)
gender.percent.female <- results %>%
filter(legislator.gender == "F") %>%
nrow() %>% / 36 * 100 %>%
gender.percent.female <- results %>%
filter(legislator.gender == "F") %>%
nrow() %>% "/" 36 * 100 %>%
gender.percent.male <- results %>%
filter(legislator.gender == "M") %>%
nrow() / 36 * 100
round(gender.percent.male, digits = 2)
gender.percent.male <- results %>%
filter(legislator.gender == "M") %>%
nrow() / 36 * 100 %>%
round(gender.percent.male, digits = 2)
gender.percent.male <- results %>%
filter(legislator.gender == "M") %>%
nrow() / 36 * 100 %>%
round(, digits = 2)
gender.percent.male <- results %>%
filter(legislator.gender == "M") %>%
nrow() / 36 * 100 %>%
round(., digits = 2)
---
output: html_document
---
```{r, echo=FALSE, message=FALSE, warning=FALSE}
library(jsonlite)
library(dplyr)
library(httr)
library(knitr)
base.url <- 'https://congress.api.sunlightfoundation.com'
# Block of code to get district number for my zipcode
zip.code <- "98195"
api.method <- "/districts/locate?"
query.params <- list(zip=zip.code)
response <- GET(paste(base.url, api.method, sep=""), query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
flattened <- flatten(results$results)
my.district <- flattened$district
```
My congressional district is district `r my.district` and my zipcode is `r zip.code`
```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Get legislators for zip code
api.method <- "/legislators/locate?"
response <- GET(paste(base.url, api.method, sep=""), query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
flattened <- flatten(results$results)
# Add markdown friendly links to twitter and their website
legislators <- flattened %>%
mutate(website=paste("[link](", website,")", sep="")) %>%
mutate(twitter=paste("[link](https://twitter.com/", twitter_id,")", sep=""))
# Get the required information and create a markdown table
legislators %>%
select(first_name,last_name,title,party,chamber,phone,website,twitter) %>%
kable(format="markdown" )
# Function to get all the Committees served by a legislator
committeesServed <- function(id){
api.method <- "/committees?"
query.params <- list(member_ids=id)
response <- GET(paste(base.url, api.method, sep=""), query = query.params)
body <- content(response, "text")
results <- fromJSON(body)
flattened <- flatten(results$results) %>%
mutate(bioguide_id = id)
}
# Create a list of legislators, run it through the committeesServed function
# and then join them together
list.of.id <- legislators %>%
select(bioguide_id)
list.of.committees <- lapply(list.of.id$bioguide_id, committeesServed) %>%
bind_rows()
legislators.and.committees <- inner_join(list.of.committees, legislators, by="bioguide_id")
legislators.and.committees <- legislators.and.committees %>%
mutate(fullname = paste(first_name, last_name, sep=" "))
# Create a bar plot with committee info
par(las=2)
par(mar=c(5,8,4,2))
counts <- table(legislators.and.committees$fullname)
barplot(rev(counts),main="Committees Served on by Each Rep.", horiz=TRUE,
names.arg=c("Pramila Jayapal", "Patty Murray", "Maria Cantwell"))
chosen.committee <- data.frame(legislators.and.committees[1,])
api.method <- "/committees?"
query.params <- list(committee_id=chosen.committee$committee_id,fields="members")
response <- GET(paste(base.url, api.method, sep=""), query = query.params)
body <- content(response, "text")
results <- fromJSON(content(response,"text"))$results$members[[1]] %>% flatten()
committee.chair <- paste(results$legislator.first_name, results$legislator.last_name,sep=" ")[1]
people.on.committee <- nrow(results)
my.rep.maj.min <- results %>%
filter(legislator.first_name == "Pramila") %>%
select(side) %>%
as.character()
gender.percent.male <- results %>%
filter(legislator.gender == "M") %>%
nrow() / 36 * 100 %>%
round(., digits = 2)
gender.percent.female <- results %>%
filter(legislator.gender == "F") %>%
nrow() / 36 * 100 %>%
round(digits = 2)
```
gender.percent.male <- results %>%
filter(legislator.gender == "M") %>%
nrow() / 36 * 100 %>%
round(digits = 2)
gender.percent.male <- results %>%
filter(legislator.gender == "M") %>%
nrow() / 36 * 100
gender.percent.male <- round(gender.percent.male, digits = 2)
gender.percent.female <- results %>%
filter(legislator.gender == "F") %>%
nrow() / 36 * 100 %>%
gender.percent.female <- round(gender.percent.female, digits = 2)
my.rep.maj.min <- results %>%
filter(legislator.first_name == "Pramila") %>%
select(side) %>%
as.character()
gender.percent.female <- results %>%
filter(legislator.gender == "F") %>%
nrow() / 36 * 100
gender.percent.female <- round(gender.percent.female, digits = 2)
install.packages("ggplot2")
load(ggplot2)
load("ggplot2")
install.packages("ggplot2")
library("ggplot2")
?diamonds
View(diamonds)
diamonds.sample <- sample_n(diamonds)
library("dplyr")
?diamonds
View(diamonds)
diamonds.sample <- sample_n(diamonds)
diamonds.sample <- sample_n(diamonds, 1000)
View(diamonds.sample)
View(diamonds.sample)
ggplot(diamonds.sample)
ggplot(data = diamonds.sample)
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price), color = aes(clarity))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price), color = clarity)
)
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price, color = blue))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price, color = "blue"))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price, color = "red"))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price, color = 'darkblue'))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price), color = 'darkblue')
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price), color = 'blue')
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price, shape = cut))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = cut, shape = price))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price, color = price))
ggplot(data = diamonds.sample) +
geom_line(mapping = aes(x = carat, y = cut, size = price))
ggplot(data = diamonds.sample) +
geom_line(mapping = aes(x = carat, y = price, size = carat))
ggplot(data = diamonds.sample) +
geom_line(mapping = aes(x = carat, y = price, color = carat))
ggplot(data = diamonds.sample) +
geom_smooth(mapping = aes(x = carat, y = price, color = carat))
ggplot(data = diamonds.sample) +
geom_smooth(mapping = aes(x = carat, y = price, color = carat))
ggplot(data = diamonds.sample) +
geom_smooth(mapping = aes(x = carat, y = price, color = cut))
ggplot(data = diamonds.sample) +
geom_smooth(mapping = aes(x = carat, y = price, color = carat))
ggplot(data = diamonds.sample) +
geom_bar(mapping = aes(x = carat, y = price, color = carat))
ggplot(data = diamonds.sample) +
geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds.sample) +
geom_bar(mapping = aes(x = cut, fill = clarity))
ggplot(data = diamonds.sample) +
geom_histogram(mapping = aes(x = cut, fill = clarity))
ggplot(data = diamonds.sample) +
geom_histogram(mapping = aes(x = cut, fill = clarity))
ggplot(data = diamonds.sample) +
geom_histogram(mapping = aes(x = price, fill = clarity))
ggplot(data = diamonds.sample) +
geom_histogram(mapping = aes(x = depths, fill = clarity))
ggplot(data = diamonds.sample) +
geom_histogram(mapping = aes(x = depth, fill = clarity))
shiny::runApp('Documents/Info201/info_201_final_project')
runApp('Documents/Info201/info_201_final_project')
runApp('Documents/Info201/info_201_final_project')
runApp('Documents/Info201/info_201_final_project')
runApp('Documents/Info201/info_201_final_project')
runApp('Documents/Info201/info_201_final_project')
setwd("~/Documents/Info201/info_201_final_project")
songs.merged.all <- read.csv("songsMerged/songs.merged.all.csv")
runApp()
runApp()
runApp()
feature.years <- songs.merged.all%>%select(feature = Song, danceability, Year)
View(feature.years)
View(feature.years)
runApp()
runApp()
runApp()
feature.years <- songs.merged.all%>%select(feature = duration_ms, Year, Song)
View(feature.years)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
